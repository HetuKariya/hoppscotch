{
  "v": 3,
  "name": "AWS Signature Auth - collection",
  "folders": [],
  "requests": [
    {
      "v": "7",
      "id": "cm0dm70cw000687bnxi830zz7",
      "auth.addTo": "HEADERS",
      "auth.region": "<<awsRegion>>",
      "auth.authType": "aws-signature",
      "auth.accessKey": "<<accessKey>>",
      "auth.secretKey": "<<secretVarKey>>",
      "auth.authActive": true,
      "auth.serviceName": "<<serviceName>>",
      "auth.serviceToken": "",
      "auth.grantTypeInfo.token": "",
      "auth.grantTypeInfo.isPKCE": false,
      "auth.grantTypeInfo.clientID": "",
      "auth.grantTypeInfo.grantType": "AUTHORIZATION_CODE",
      "auth.grantTypeInfo.authEndpoint": "",
      "auth.grantTypeInfo.clientSecret": "",
      "auth.grantTypeInfo.tokenEndpoint": "",
      "auth.grantTypeInfo.codeVerifierMethod": "S256",
      "body.body": null,
      "body.contentType": null,
      "name": "aws-signature-auth-headers",
      "method": "GET",
      "params": [],
      "headers": [],
      "endpoint": "<<url>>",
      "testScript": "pw.test(\"Successfully sends relevant AWS signature information via headers\", ()=> {\n    const { headers } = pw.response.body\n\n  // Dynamic values, hence comparing the type.\n  pw.expect(headers[\"authorization\"]).toBeType(\"string\");\n  pw.expect(headers[\"x-amz-date\"]).toBeType(\"string\");\n  \n  pw.expect(headers[\"x-amz-content-sha256\"]).toBe(\"UNSIGNED-PAYLOAD\")\n  \n  // No session token supplied\n  pw.expect(headers[\"x-amz-security-token\"]).toBe(undefined)\n  \n});",
      "preRequestScript": "",
      "requestVariables[0].key": "secretVarKey",
      "requestVariables[0].value": "<<secretKey>>",
      "requestVariables[0].active": true
    },
    {
      "v": "7",
      "id": "cm0dm70cw000687bnxi830zz7",
      "auth.addTo": "QUERY_PARAMS",
      "auth.region": "<<awsRegion>>",
      "auth.authType": "aws-signature",
      "auth.accessKey": "<<accessKey>>",
      "auth.secretKey": "<<secretKey>>",
      "auth.authActive": true,
      "auth.serviceName": "<<serviceName>>",
      "auth.serviceToken": "<<serviceToken>>",
      "auth.grantTypeInfo.token": "",
      "auth.grantTypeInfo.isPKCE": false,
      "auth.grantTypeInfo.clientID": "",
      "auth.grantTypeInfo.grantType": "AUTHORIZATION_CODE",
      "auth.grantTypeInfo.authEndpoint": "",
      "auth.grantTypeInfo.clientSecret": "",
      "auth.grantTypeInfo.tokenEndpoint": "",
      "auth.grantTypeInfo.codeVerifierMethod": "S256",
      "body.body": null,
      "body.contentType": null,
      "name": "aws-signature-auth-query-params",
      "method": "GET",
      "params": [],
      "headers": [],
      "endpoint": "<<url>>",
      "testScript": "pw.test(\"Successfully sends relevant AWS signature information via query params\", ()=> {\n    const { args } = pw.response.body\n    pw.expect(args[\"X-Amz-Algorithm\"]).toBe(\"AWS4-HMAC-SHA256\");\n    pw.expect(args[\"X-Amz-Algorithm\"]).toBe(\"AWS4-HMAC-SHA256\");\n    pw.expect(args[\"X-Amz-Credential\"]).toInclude(\"test-access-key\");\n    pw.expect(args[\"X-Amz-Credential\"]).toInclude(\"eu-west-1/s3\");\n\n  // Dynamic values, hence comparing the type.\n  pw.expect(args[\"X-Amz-Date\"]).toBeType(\"string\");\n  pw.expect(args[\"X-Amz-Signature\"]).toBeType(\"string\");\n\n  pw.expect(args[\"X-Amz-Expires\"]).toBe(\"86400\")\n  pw.expect(args[\"X-Amz-SignedHeaders\"]).toBe(\"host\")\n  pw.expect(args[\"X-Amz-Security-Token\"]).toBe(\"test-token\")\n  \n});",
      "preRequestScript": "",
      "requestVariables[0].key": "awsRegion",
      "requestVariables[0].value": "eu-west-1",
      "requestVariables[0].active": true,
      "requestVariables[1].key": "secretKey",
      "requestVariables[1].value": "test-secret-key-overriden",
      "requestVariables[1].active": true
    }
  ],
  "auth.authType": "inherit",
  "auth.authActive": true,
  "headers": []
}
